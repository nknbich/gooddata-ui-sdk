// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`measure converter > should return converted alias 1`] = `
{
  "alias": "alias",
  "definition": {
    "measure": {
      "item": {
        "identifier": "foo",
      },
    },
  },
  "localIdentifier": "m_627f0f0a_foo",
}
`;

exports[`measure converter > should return converted arithmetic measure definition from model to AFM 1`] = `
{
  "definition": {
    "arithmeticMeasure": {
      "measureIdentifiers": [
        "foo",
        "bar",
      ],
      "operator": "sum",
    },
  },
  "localIdentifier": "m_3858f62230ac3c915f300c664312c63f",
}
`;

exports[`measure converter > should return converted definition 1`] = `
{
  "definition": {
    "measure": {
      "filters": [
        {
          "positiveAttributeFilter": {
            "displayForm": {
              "identifier": "filter",
            },
            "in": {
              "uris": [
                "baz",
              ],
            },
          },
        },
      ],
      "item": {
        "identifier": "foo",
      },
    },
  },
  "localIdentifier": "m_foo_e2e8b1b1",
}
`;

exports[`measure converter > should return converted pop measure definition from model to AFM 1`] = `
{
  "definition": {
    "popMeasure": {
      "measureIdentifier": "m_acugFHNJgsBy",
      "popAttribute": {
        "identifier": "attr",
      },
    },
  },
  "localIdentifier": "m_m_acugFHNJgsBy_attr",
}
`;

exports[`measure converter > should return converted previous period measure from model to AFM 1`] = `
{
  "definition": {
    "previousPeriodMeasure": {
      "dateDataSets": [
        {
          "dataSet": {
            "identifier": "bar",
          },
          "periodsAgo": 3,
        },
      ],
      "measureIdentifier": "foo",
    },
  },
  "localIdentifier": "m_foo_previous_period",
}
`;

exports[`measure converter > should return custom format: arithmetic measure 1`] = `
{
  "definition": {
    "arithmeticMeasure": {
      "measureIdentifiers": [
        "foo",
        "bar",
      ],
      "operator": "change",
    },
  },
  "format": "custom #,##0,00",
  "localIdentifier": "m_e70a9702_3858f62230ac3c915f300c664312c63f",
}
`;

exports[`measure converter > should return custom format: pop measure 1`] = `
{
  "definition": {
    "popMeasure": {
      "measureIdentifier": "m_acugFHNJgsBy",
      "popAttribute": {
        "identifier": "attr",
      },
    },
  },
  "format": "custom #,##0,00",
  "localIdentifier": "m_e70a9702_m_acugFHNJgsBy_attr",
}
`;

exports[`measure converter > should return custom format: previous period measure 1`] = `
{
  "definition": {
    "previousPeriodMeasure": {
      "dateDataSets": [
        {
          "dataSet": {
            "identifier": "bar",
          },
          "periodsAgo": 3,
        },
      ],
      "measureIdentifier": "foo",
    },
  },
  "format": "custom #,##0,00",
  "localIdentifier": "m_e70a9702_foo_previous_period",
}
`;

exports[`measure converter > should return custom format: simple measure 1`] = `
{
  "definition": {
    "measure": {
      "item": {
        "identifier": "foo",
      },
    },
  },
  "format": "custom #,##0,00",
  "localIdentifier": "m_e70a9702_foo",
}
`;

exports[`measure converter > should return format of measure: change 1`] = `
{
  "definition": {
    "arithmeticMeasure": {
      "measureIdentifiers": [
        "foo",
        "bar",
      ],
      "operator": "change",
    },
  },
  "format": "#,##0.00%",
  "localIdentifier": "m_3858f62230ac3c915f300c664312c63f",
}
`;

exports[`measure converter > should return format of measure: count 1`] = `
{
  "definition": {
    "measure": {
      "aggregation": "count",
      "item": {
        "identifier": "foo",
      },
    },
  },
  "format": "#,##0",
  "localIdentifier": "m_foo_count",
}
`;

exports[`measure converter > should return format of measure: ratio 1`] = `
{
  "definition": {
    "measure": {
      "computeRatio": true,
      "item": {
        "identifier": "foo",
      },
    },
  },
  "format": "#,##0.00%",
  "localIdentifier": "m_foo_ratio",
}
`;

exports[`measure converter > should return local identifier of measure 1`] = `
{
  "definition": {
    "measure": {
      "item": {
        "identifier": "aangOxLSeztu",
      },
    },
  },
  "localIdentifier": "m_aangOxLSeztu",
}
`;

exports[`measure converter > should throw an error when measure definition is not supported 1`] = `[Error: The measure definition is not supported: {}]`;
